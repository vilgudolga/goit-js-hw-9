{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAkBC,SAASC,cAAc,uBACzCC,EAAiBF,SAASC,cAAc,sBACxCE,EAAcH,SAASC,cAAc,wBAG3C,SAASG,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAXWN,SAASC,cAAc,yBAkB/BY,iBAAiB,SAAS,SAAAC,GAClCC,QAAQC,IAAI,UACZF,EAAEG,iBACF,IAAMC,EAAaC,OAAOpB,EAAgBqB,OACpCC,EAAYF,OAAOjB,EAAekB,OAClCE,EAASH,OAAOhB,EAAYiB,OAClCL,QAAQC,IAAK,GAAkBO,OAAfL,EAAW,MAAWK,OAAPD,IAC/B,IAAK,IAAIE,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChCT,QAAQC,IAAIQ,GAEZpB,EAAcoB,EADCN,EAAaG,GAAaG,EAAI,IAE1CC,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAA9B,GAAS+B,OAAOC,QACd,qBAAoCN,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,O,IAG7CwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAA9B,GAAS+B,OAAOG,QACd,oBAAmCR,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst firstDelayInput = document.querySelector('input[name=\"delay\"]');\nconst stepDelayInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst createBtn = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n};\n\n\n\ncreateBtn.addEventListener('click', e => {\n  console.log(\"dziala\")\n  e.preventDefault();\n  const firstDelay = Number(firstDelayInput.value);\n  const stepDelay = Number(stepDelayInput.value);\n  const amount = Number(amountInput.value);\n  console.log (`${firstDelay}  ${amount}`)\n  for (let i = 1; i <= amount; i++) {\n    console.log(i);\n    let stepTime = firstDelay + stepDelay * (i - 1);\n    createPromise(i, stepTime)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `Fulfilled promise ${position} in ${delay} ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `Rejected promise ${position} in ${delay} ms`\n        );\n      });\n  }\n});"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$firstDelayInput","document","querySelector","$ce04d3a99e08e73b$var$stepDelayInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","console","log","preventDefault","firstDelay","Number","value","stepDelay","amount","concat","i","then","param","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.49740955.js.map"}